apply plugin: 'java'
apply plugin: 'checkstyle'

ext {
    javaVersion = '1.8'
    junitVersion = '4.12'
    cucumberVersion = '1.2.5'
    seleniumVersion = '3.11.0'
    springVersion = '4.3.11.RELEASE'
    springBootVersion = '1.5.7.RELEASE'
    slf4jVersion = '1.7.25'
    logbackVersion = '1.2.3'
    checkstyleVersion = '6.19'
    cucumberOptions = ['--plugin', 'pretty', '--plugin', 'json:build/reports/selenium/selenium.json',
                       '--plugin', 'html:build/reports/selenium', '--glue', 'uk.gov.dvsa.mot',
                       '--plugin', 'rerun:target/rerun.txt']
}

sourceCompatibility = javaVersion
targetCompatibility = javaVersion

repositories {
    jcenter()
}

sourceSets {
    server {
        java {
            srcDirs = ['src/server/java']
        }
        resources {
            srcDirs = ['src/server/resources']
        }
    }
    serverTest {
        java {
            srcDirs = ['src/server-test/java']
        }
        resources {
            srcDirs = ['src/server-test/resources']
        }
    }
}

configurations {
    cucumberRuntime {
        extendsFrom runtime
    }
    all*.exclude group: 'commons-logging', module: 'commons-logging'
}

task serverTest(type: Test) {
    testClassesDir = sourceSets.serverTest.output.classesDir
    classpath = sourceSets.serverTest.runtimeClasspath
}

check.dependsOn test, serverTest

checkstyle {
    configFile = new File(rootDir, "dvsa_java_checks.xml")
    toolVersion = checkstyleVersion
    ignoreFailures = false
    maxErrors = 0
    maxWarnings = 0
    showViolations = true
}

task('cucumber-feature') {
    description 'Runs a single feature (specified using -Pfeature=...)'
    dependsOn assemble, compileJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('feature')) {
            throw new GradleException('feature parameter must be defined')
        }
        copy {
            into "build/server-libs"
            from configurations.serverRuntime + sourceSets.server.output
        }
        javaexec {
            main = 'uk.gov.dvsa.mot.runner.StartDataServer'
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
        try {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output

                // Cucumber configuration
                args = cucumberOptions + ['src/main/resources/features/' + feature]
            }
        } finally {
            javaexec {
                main = 'uk.gov.dvsa.mot.runner.StopDataServer'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                ignoreExitValue = true
            }
        }
    }
}

task('cucumber-scenario') {
    description 'Runs matching scenarios within a single feature test (specified using -Pfeature=... -Pscenario=...)'
    dependsOn assemble, compileJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('feature')) {
            throw new GradleException('feature parameter must be defined')
        }
        if (!project.hasProperty('scenario')) {
            throw new GradleException('scenario parameter must be defined')
        }
        copy {
            into "build/server-libs"
            from configurations.serverRuntime + sourceSets.server.output
        }
        javaexec {
            main = 'uk.gov.dvsa.mot.runner.StartDataServer'
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
        try {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output

                // Cucumber configuration
                args = cucumberOptions + ['--name', scenario, 'src/main/resources/features/' + feature]
            }
        } finally {
            javaexec {
                main = 'uk.gov.dvsa.mot.runner.StopDataServer'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                ignoreExitValue = true
            }
        }
    }
}

task('cucumber-tag') {
    description 'Runs all features matching the tag(s) (specified using -Ptag=...)'
    dependsOn assemble, compileJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('tag')) {
            throw new GradleException('tag parameter must be defined')
        }
        copy {
            into "build/server-libs"
            from configurations.serverRuntime + sourceSets.server.output
        }
        javaexec {
            main = 'uk.gov.dvsa.mot.runner.StartDataServer'
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
        try {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output

                // Cucumber configuration
                args = cucumberOptions + ['--tags', tag, 'src/main/resources/features']
            }
        } finally {
            javaexec {
                main = 'uk.gov.dvsa.mot.runner.StopDataServer'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                ignoreExitValue = true
            }
        }
    }
}

task('cucumber-rerun') {
    description 'Reruns all failed tests as listed within target/rerun.txt'
    dependsOn assemble, compileJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        copy {
            into "build/server-libs"
            from configurations.serverRuntime + sourceSets.server.output
        }
        javaexec {
            main = 'uk.gov.dvsa.mot.runner.StartDataServer'
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
        try {
            javaexec {
                main = "cucumber.api.cli.Main"
                classpath = configurations.cucumberRuntime + sourceSets.main.output

                // Find all the features to be rerun
                String fileContents = new File('target/rerun.txt').text
                fileContents = fileContents.replaceAll('src/main/resources/features/', '')
                String[] features = fileContents.split('(?=theme)|(?=smoke)|(?=moth)')

                if (features.length == 0 || "".equals(features[0])) {
                    throw new GradleException('No scenarios to rerun')
                }

                // Add all the rerun features to the cucumber options
                for (int i = 0; i < features.length; i++) {
                    println 'Feature: ' + features[i].trim()
                    cucumberOptions = cucumberOptions + ['src/main/resources/features/' + features[i].trim()]
                }

                args = cucumberOptions
            }
        } finally {
            javaexec {
                main = 'uk.gov.dvsa.mot.runner.StopDataServer'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                ignoreExitValue = true
            }
        }
    }
}

task('parallel') {
    description 'Runs all features matching the tag(s) (specified using -Ptag=...) in parallel'
    dependsOn assemble, compileJava, check
    finalizedBy 'cucumber-reporting'
    doLast {
        if (!project.hasProperty('tag')) {
            throw new GradleException('tag parameter must be defined')
        }
        copy {
            into "build/server-libs"
            from configurations.serverRuntime + sourceSets.server.output
        }
        javaexec {
            main = 'uk.gov.dvsa.mot.runner.StartDataServer'
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
        try {
            javaexec {
                main = 'org.junit.runner.JUnitCore'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                args = ['uk.gov.dvsa.mot.runner.CourgetteJUnitRunner']

                // Cucumber configuration
                systemProperties = ['cucumber.options': '--tags ' + tag]
            }
        } finally {
            javaexec {
                main = 'uk.gov.dvsa.mot.runner.StopDataServer'
                classpath = configurations.cucumberRuntime + sourceSets.main.output
                ignoreExitValue = true
            }
        }
    }
}

task('run-server') {
    description 'Use to test/debug the data server'
    dependsOn assemble, compileJava, check
    doLast {
        javaexec {
            main = 'uk.gov.dvsa.mot.server.ServerApplication'
            classpath = configurations.serverRuntime + sourceSets.server.output
        }
    }
}

clean.doFirst {
    delete "target"
}

task('cucumber-reporting') {
    dependsOn assemble, compileJava, check
    doLast{
        javaexec {
            main = "uk.gov.dvsa.mot.reporting.CucumberReporting"
            classpath = configurations.cucumberRuntime + sourceSets.main.output
        }
    }
}

dependencies {
    compile 'org.apache.poi:poi-ooxml:3.17'
    compile 'org.apache.pdfbox:pdfbox:2.0.7'
    compile 'org.apache.commons:commons-csv:1.5'
    compile 'com.jayway.restassured:rest-assured:2.9.0'
    compile "junit:junit:$junitVersion"
    compile "info.cukes:cucumber-java8:$cucumberVersion"
    compile "info.cukes:cucumber-spring:$cucumberVersion"
    compile "io.github.prashant-ramcharan:courgette-jvm:1.4.0"
    compile ("com.github.mkolisnyk:cucumber-report-generator:1.3") {
        // not using testng, clashes with junit
        exclude group: 'info.cukes', module: 'cucumber-testng'
    }
    compile ("org.seleniumhq.selenium:selenium-java:$seleniumVersion") {
        // exclude the unused drivers (IE, Edge, Safari, Firefox, Opera)
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-edge-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-firefox-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-ie-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-opera-driver'
        exclude group: 'org.seleniumhq.selenium', module: 'selenium-safari-driver'
    }
    compile "org.slf4j:slf4j-api:$slf4jVersion"
    runtime "org.slf4j:log4j-over-slf4j:$slf4jVersion"
    runtime "org.slf4j:jcl-over-slf4j:$slf4jVersion"
    runtime "org.slf4j:jul-to-slf4j:$slf4jVersion"
    runtime "ch.qos.logback:logback-classic:$logbackVersion"
    compile "org.springframework:spring-context:$springVersion"
    compile "org.springframework:spring-web:$springVersion"
    compile "org.springframework:spring-test:$springVersion"
    compile "javax.inject:javax.inject:1"
    runtime ("xml-apis:xml-apis:1.4.01") {
        // spring-context requires the older XML APIs
        force = true
    }

    // depends upon the "mot/2fa-pin-generator" project being checked out alongside this project, then built manually
    compile files("../2fa-pin-generator/build/libs/2fa-generator-1.0.jar")

    compile group: 'org.json', name: 'json', version: '20180130'

    serverCompile "org.slf4j:slf4j-api:$slf4jVersion"
    serverRuntime "ch.qos.logback:logback-classic:$logbackVersion"
    serverCompile "org.springframework:spring-jdbc:$springVersion"
    serverCompile("org.springframework.boot:spring-boot-starter-web:$springBootVersion")
    serverCompile("org.springframework.boot:spring-boot-starter-actuator:$springBootVersion")
    serverCompile "javax.inject:javax.inject:1"
    serverCompile "mysql:mysql-connector-java:5.1.44"
    serverCompile"commons-dbcp:commons-dbcp:1.4"
    serverRuntime ("xml-apis:xml-apis:1.4.01") {
        // spring-context requires the older XML APIs
        force = true
    }

    // only used by the tests for the tests
    testCompile "org.seleniumhq.selenium:htmlunit-driver:2.27"
    testCompile "org.springframework:spring-test:$springVersion"
    testCompile "org.mockito:mockito-core:1.10.19"

    // only used by the tests for the server
    serverTestCompile sourceSets.server.output
    serverTestCompile configurations.serverCompile
    serverTestCompile "junit:junit:$junitVersion"
    serverTestCompile "org.springframework.boot:spring-boot-starter-test:$springBootVersion"
}
